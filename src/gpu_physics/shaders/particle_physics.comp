#version 450

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

struct Particle {
    vec3 position;
    vec3 velocity;
    float mass;
    float padding;
};

layout(std430, binding = 0) restrict buffer ParticleBuffer {
    Particle particles[];
};

layout(binding = 1) uniform UniformBufferObject {
    float deltaTime;
    vec3 gravity;
    uint particleCount;
} ubo;

void main() {
    uint index = gl_GlobalInvocationID.x;
    
    if (index >= ubo.particleCount) {
        return;
    }
    
    // Update velocity with gravity
    particles[index].velocity += ubo.gravity * ubo.deltaTime;
    
    // Update position with velocity
    particles[index].position += particles[index].velocity * ubo.deltaTime;
    
    // Simple ground collision (bounce off y=0 plane)
    if (particles[index].position.y < 0.0) {
        particles[index].position.y = 0.0;
        particles[index].velocity.y = -particles[index].velocity.y * 0.8; // Damping
    }
    
    // Simple collision detection between particles
    for (uint i = 0; i < ubo.particleCount; ++i) {
        if (i == index) continue;
        
        vec3 direction = particles[index].position - particles[i].position;
        float distance = length(direction);
        float minDistance = 0.1; // Minimum distance between particles
        
        if (distance < minDistance && distance > 0.0) {
            vec3 normal = normalize(direction);
            float overlap = minDistance - distance;
            
            // Simple elastic collision response
            particles[index].position += normal * overlap * 0.5;
            
            // Exchange velocities (simplified)
            float massSum = particles[index].mass + particles[i].mass;
            if (massSum > 0.0) {
                vec3 relativeVelocity = particles[index].velocity - particles[i].velocity;
                float impulse = 2.0 * dot(relativeVelocity, normal) / massSum;
                particles[index].velocity -= impulse * particles[i].mass * normal;
            }
        }
    }
}